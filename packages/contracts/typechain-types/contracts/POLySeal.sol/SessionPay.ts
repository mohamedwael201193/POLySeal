/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SessionPay {
  export type SessionStruct = {
    payer: AddressLike;
    provider: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    createdAt: BigNumberish;
    settled: boolean;
    inputHash: BytesLike;
    model: string;
    outputRef: string;
  };

  export type SessionStructOutput = [
    payer: string,
    provider: string,
    token: string,
    amount: bigint,
    createdAt: bigint,
    settled: boolean,
    inputHash: string,
    model: string,
    outputRef: string
  ] & {
    payer: string;
    provider: string;
    token: string;
    amount: bigint;
    createdAt: bigint;
    settled: boolean;
    inputHash: string;
    model: string;
    outputRef: string;
  };
}

export interface SessionPayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canRefund"
      | "confirmSuccess"
      | "getSession"
      | "isSettled"
      | "openSession"
      | "owner"
      | "pause"
      | "paused"
      | "refund"
      | "refundDelay"
      | "renounceOwnership"
      | "sessionExists"
      | "setRefundDelay"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "RefundDelayUpdated"
      | "SessionOpened"
      | "SessionRefunded"
      | "SessionSettled"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canRefund",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmSuccess",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSession",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSettled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "openSession",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "refundDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sessionExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "canRefund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSession", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSettled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sessionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundDelayUpdatedEvent {
  export type InputTuple = [oldDelay: BigNumberish, newDelay: BigNumberish];
  export type OutputTuple = [oldDelay: bigint, newDelay: bigint];
  export interface OutputObject {
    oldDelay: bigint;
    newDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionOpenedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    payer: AddressLike,
    provider: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    model: string,
    inputHash: BytesLike,
    createdAt: BigNumberish
  ];
  export type OutputTuple = [
    requestId: string,
    payer: string,
    provider: string,
    token: string,
    amount: bigint,
    model: string,
    inputHash: string,
    createdAt: bigint
  ];
  export interface OutputObject {
    requestId: string;
    payer: string;
    provider: string;
    token: string;
    amount: bigint;
    model: string;
    inputHash: string;
    createdAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionRefundedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    payer: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: string,
    payer: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    requestId: string;
    payer: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionSettledEvent {
  export type InputTuple = [
    requestId: BytesLike,
    payer: AddressLike,
    provider: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    outputRef: string
  ];
  export type OutputTuple = [
    requestId: string,
    payer: string,
    provider: string,
    token: string,
    amount: bigint,
    outputRef: string
  ];
  export interface OutputObject {
    requestId: string;
    payer: string;
    provider: string;
    token: string;
    amount: bigint;
    outputRef: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SessionPay extends BaseContract {
  connect(runner?: ContractRunner | null): SessionPay;
  waitForDeployment(): Promise<this>;

  interface: SessionPayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canRefund: TypedContractMethod<[requestId: BytesLike], [boolean], "view">;

  confirmSuccess: TypedContractMethod<
    [requestId: BytesLike, outputRef: string],
    [void],
    "nonpayable"
  >;

  getSession: TypedContractMethod<
    [requestId: BytesLike],
    [SessionPay.SessionStructOutput],
    "view"
  >;

  isSettled: TypedContractMethod<[requestId: BytesLike], [boolean], "view">;

  openSession: TypedContractMethod<
    [
      provider: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      requestId: BytesLike,
      model: string,
      inputHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  refund: TypedContractMethod<[requestId: BytesLike], [void], "nonpayable">;

  refundDelay: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sessionExists: TypedContractMethod<[requestId: BytesLike], [boolean], "view">;

  setRefundDelay: TypedContractMethod<
    [newDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canRefund"
  ): TypedContractMethod<[requestId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "confirmSuccess"
  ): TypedContractMethod<
    [requestId: BytesLike, outputRef: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSession"
  ): TypedContractMethod<
    [requestId: BytesLike],
    [SessionPay.SessionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSettled"
  ): TypedContractMethod<[requestId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "openSession"
  ): TypedContractMethod<
    [
      provider: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      requestId: BytesLike,
      model: string,
      inputHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[requestId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refundDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sessionExists"
  ): TypedContractMethod<[requestId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setRefundDelay"
  ): TypedContractMethod<[newDelay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RefundDelayUpdated"
  ): TypedContractEvent<
    RefundDelayUpdatedEvent.InputTuple,
    RefundDelayUpdatedEvent.OutputTuple,
    RefundDelayUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SessionOpened"
  ): TypedContractEvent<
    SessionOpenedEvent.InputTuple,
    SessionOpenedEvent.OutputTuple,
    SessionOpenedEvent.OutputObject
  >;
  getEvent(
    key: "SessionRefunded"
  ): TypedContractEvent<
    SessionRefundedEvent.InputTuple,
    SessionRefundedEvent.OutputTuple,
    SessionRefundedEvent.OutputObject
  >;
  getEvent(
    key: "SessionSettled"
  ): TypedContractEvent<
    SessionSettledEvent.InputTuple,
    SessionSettledEvent.OutputTuple,
    SessionSettledEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RefundDelayUpdated(uint64,uint64)": TypedContractEvent<
      RefundDelayUpdatedEvent.InputTuple,
      RefundDelayUpdatedEvent.OutputTuple,
      RefundDelayUpdatedEvent.OutputObject
    >;
    RefundDelayUpdated: TypedContractEvent<
      RefundDelayUpdatedEvent.InputTuple,
      RefundDelayUpdatedEvent.OutputTuple,
      RefundDelayUpdatedEvent.OutputObject
    >;

    "SessionOpened(bytes32,address,address,address,uint256,string,bytes32,uint64)": TypedContractEvent<
      SessionOpenedEvent.InputTuple,
      SessionOpenedEvent.OutputTuple,
      SessionOpenedEvent.OutputObject
    >;
    SessionOpened: TypedContractEvent<
      SessionOpenedEvent.InputTuple,
      SessionOpenedEvent.OutputTuple,
      SessionOpenedEvent.OutputObject
    >;

    "SessionRefunded(bytes32,address,address,uint256)": TypedContractEvent<
      SessionRefundedEvent.InputTuple,
      SessionRefundedEvent.OutputTuple,
      SessionRefundedEvent.OutputObject
    >;
    SessionRefunded: TypedContractEvent<
      SessionRefundedEvent.InputTuple,
      SessionRefundedEvent.OutputTuple,
      SessionRefundedEvent.OutputObject
    >;

    "SessionSettled(bytes32,address,address,address,uint256,string)": TypedContractEvent<
      SessionSettledEvent.InputTuple,
      SessionSettledEvent.OutputTuple,
      SessionSettledEvent.OutputObject
    >;
    SessionSettled: TypedContractEvent<
      SessionSettledEvent.InputTuple,
      SessionSettledEvent.OutputTuple,
      SessionSettledEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
